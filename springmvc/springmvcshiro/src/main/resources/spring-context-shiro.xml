<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="
           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       ">
	<!-- 缓存 在spring-context配置文件中，还有一个是需要配置-cacheManager,因为shiro的session是自己实现的，所以我们还需要一个缓存框架，所以在spring的配置文件一定要注意配置哦，用的是ehcache -->
	<!-- Shiro权限过滤过滤器定义 -->
	<bean name="shiroFilterChainDefinitions" class="java.lang.String">
		<constructor-arg>
			<value>
			    /springmvcweb=casFilter
				/user/logout=logout 
				/index.html=anon 
				/pages/login.html =anon 
				/static/**=anon 
				/pages/index.html=anon 
				/pages/blank.html =anon
				/pages/forms.html =perms[user:deleteUser]
				/pages/buttons.html=roles[sysadmin]
				/pages/**=authc
				/user/login=anon
				/logout=logout 
				/**=anon
			</value>
		</constructor-arg>
	</bean>

	<bean id="userRealm" class="com.gsafety.shiro.realms.UserRealm" />
	<!-- 安全认证过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<!-- loginUrl登录页面，successUrl登录成功的页面 -->
		<property name="loginUrl" value="/pages/login.html" />
		<property name="successUrl" value="/pages/index.html" />
		<!-- unauthorizedUrl，系统未认证时跳转的页面 -->
		<property name="unauthorizedUrl" value="/pages/blank.html" />

		<property name="filters">
			<map>
				<!-- 是否启用验证码检验 -->
				<entry key="casFilter" value-ref="casFilter" />
				<!-- 匿名的校验 -->
				<entry key="anon" value-ref="myAnonFilter" />
				<!-- 匿名的校验 -->
				<entry key="authc" value-ref="myAuthcFilter" />
				<!-- 登出的校验 -->
				<entry key="logout" value-ref="logout" />
				<!-- 用户的校验 -->
				<entry key="user" value-ref="myUserFilter" />
				<!-- 权限校验 -->
				<entry key="perms" value-ref="myPermsFilter" />
				<!-- 橘色校验 -->
				<entry key="roles" value-ref="myRolesFilter" />
			</map>
		</property>
		<property name="filterChainDefinitions">
			<ref bean="shiroFilterChainDefinitions" />
		</property>
	</bean>

	<!-- 登录验证过滤器 -->
	<bean id="myAuthcFilter" class="com.gsafety.shiro.filter.MyFormAuthenticationFilter">
		<!-- 配置登录页面 -->
		<property name="loginUrl" value="/pages/login.html" />
		<property name="loginRequest" value="/user/login" />
	</bean>
	<!-- 可以进行自定义 引入匿名对象 -->

	<bean id="myAnonFilter" class="org.apache.shiro.web.filter.authc.AnonymousFilter" />
    <bean id="myPermsFilter" class="org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter" />
    <bean id="myUserFilter" class="org.apache.shiro.web.filter.authc.UserFilter" />
    <bean id="myRolesFilter" class="org.apache.shiro.web.filter.authz.RolesAuthorizationFilter" />
	<bean id="mylogoutFilter" class="org.apache.shiro.web.filter.authc.LogoutFilter" />
	<!-- 定义Shiro安全管理配置 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
	<!-- 1、shiro自己的数据库认证。否则走cas-server的认证 -->
	<!-- 	<property name="realm" ref="userRealm" /> -->
	<property name="realm" ref="casRealm" />
	</bean>
	<!-- shiro-cas登录过滤器 -->
	<bean id="casFilter" class="org.apache.shiro.cas.CasFilter"><!-- 配置验证错误时的失败页面 ，这里配置为登录页面 -->
		<property name="failureUrl" value="http://localhost:8080/cas/login?service=http://localhost:8180/springmvcweb" />
	</bean>

	<!-- 退出登录过滤器 -->
	<bean id="logout" class="org.apache.shiro.web.filter.authc.LogoutFilter">
		<property name="redirectUrl"
			value="http://localhost:8080/cas/logout?service=http://localhost:8180/springmvcweb/index.html" />
	</bean>

 <!-- 自定义casRealm -->
    <bean id="casRealm" class="com.gsafety.shiro.realms.CASRealm">
        <!-- <property name="defaultRoles" value="ROLE_USER" /> -->
        <!-- 配置cas服务器地址 -->
        <property name="casServerUrlPrefix" value="http://localhost:8080/cas" />
        <!-- 客户端的回调地址设置，必须和上面的shiro-cas过滤器casFilter拦截的地址一致 -->
        <property name="casService" value="http://localhost:8180/springmvcweb" />
    </bean>
	<!-- Shiro生命周期处理器 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
</beans>